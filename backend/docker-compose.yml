version: "3.8"

# This docker-compose.yml file expects a .env file in the same directory
# with the following variables defined:
# RDS_ENDPOINT=your_rds_instance_endpoint_here
# RDS_USERNAME=your_rds_username_here
# RDS_PASSWORD=your_rds_password_here
# DB_NAME=healthcarecrm (or your database name)

services:
  app:
    build: . # This tells Docker to build an image from the Dockerfile in the current directory
    container_name: healthcarecrm-app
    ports:
      - "8080:8080" # Maps port 8080 of the container to port 8080 on your host machine
    environment:
      # These environment variables are passed to the Spring Boot application inside the container.
      # They will override any corresponding values in application.properties if Spring Boot is configured
      # to use environment variables (which it does by default for these properties).
      - SPRING_DATASOURCE_URL=jdbc:mysql://${RDS_ENDPOINT}:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true
      # For production, you'd want useSSL=true and configure the truststore as discussed previously.

      - SPRING_DATASOURCE_USERNAME=${RDS_USERNAME}

      - SPRING_DATASOURCE_PASSWORD=${RDS_PASSWORD}

      # Optional: You can also set other Spring Boot properties here if needed
      # For example, if you want ddl-auto to be configurable via .env:
      # In .env: SPRING_JPA_HIBERNATE_DDL_AUTO=update
      # Here: - SPRING_JPA_HIBERNATE_DDL_AUTO=${SPRING_JPA_HIBERNATE_DDL_AUTO}
      # - SERVER_PORT=8080 # Though this is usually handled by the Dockerfile or Spring default

# 'volumes' section is removed as mysql_data is no longer needed without a local db service.
# 'networks' section is also not strictly needed for this simple setup,
# as the 'app' container will access RDS over the internet (or your default Docker bridge network).

