Below is the Health Care CRM System Specification Document modeled after the provided sample:

---

# Health Care CRM System Specification Document

## 1. Introduction

### 1.1 Purpose

This document defines the technical, functional, and business requirements for a Health Care CRM Systemâ€” a J2EE-based web application built using the Spring Framework. The system will provide dedicated dashboards for administrators and employees, enable task assignments, and maintain comprehensive customer records including health and insurance details.

### 1.2 Scope

The project will be divided into the following phases:

- **Phase I:** Requirements Gathering, Business Case & Architecture Planning.
- **Phase II:** MVP Development (Authentication, Customer & Task Management, Basic Reporting).
- **Phase III:** Deployment, Testing, and Finalization.

Core functionalities include:

- Secure authentication with role-based access for Admins and Employees.
- Customer management (CRUD operations on profiles, insurance, and medical history).
- Task management (assignment, progress tracking, and completion).
- Reports dashboard for performance and operational insights.

### 1.3 Definitions, Acronyms, and Abbreviations

- **CRM:** Customer Relationship Management
- **J2EE:** Java 2 Platform, Enterprise Edition
- **MVC:** Model-View-Controller
- **JPA:** Java Persistence API
- **MVP:** Minimum Viable Product
- **CRUD:** Create, Read, Update, Delete
- **JWT:** JSON Web Token (for secure API sessions)
- **Docker/Podman:** Containerization tools

### 1.4 References

- [Spring Framework Documentation](https://spring.io)
- [Spring Boot Documentation](https://spring.io/projects/spring-boot)
- [J2EE Documentation](https://docs.oracle.com/javaee/)
- [GitHub Repository](https://github.com/GaurangHD/Health-Care-CRM)

---

## 2. Business Case

### 2.1 Business Case Requirements

- **Problem Statement:** Health care centers require an efficient, centralized system to manage patient/customer records, insurance details, and employee task assignments. Traditional systems often lack integration, leading to data silos and operational delays.
- **Target Audience:** Health care centers, clinics, and administrative departments that need streamlined management of patient records and employee tasks.
- **Proposed Solution:** Develop a CRM system that centralizes customer records, supports secure, role-based dashboards for administrators and employees, and provides efficient task management along with comprehensive reporting features.
- **Scope:**
  - **Mandatory:** Authentication, Customer Management, Task Management, Reports Dashboard.
  - **Optional:** Notification alerts, audit trails, and enhanced data analytics.

### 2.2 Business Case Justification

- **Relevance:** Addresses critical needs in the healthcare sector, particularly in the Canadian context where insurance and detailed patient histories are vital.
- **Expected Outcomes:** Improved operational efficiency, reduced administrative workload, and enhanced decision-making through data-driven insights.
- **Feasibility:** With a focused scope and simplified toolset, the project is viable within the one-month timeline.

---

## 3. Technology Requirements

### 3.1 Backend Development

- **Java 17+:** Our primary programming language.
- **Spring Boot:** For rapid application development, configuration, and bootstrapping the application.
- **Spring MVC:** To handle web requests and define controllers.
- **Spring JPA (Hibernate):** For Object-Relational Mapping (ORM) and database interactions.
- **Spring Security:** To implement robust authentication and authorization mechanisms.
- **Spring WebFlux (Optional):** For building reactive applications if needed in the future.

### 3.2 Frontend Development

- **Thymeleaf:** For server-side rendering of dynamic web pages and managing form bindings.
- **HTML5, CSS3, and JavaScript:** To build a responsive and interactive user interface.
- **Bootstrap:** To ensure consistent styling and responsive design across devices.

### 3.3 Database

- **MySQL/PostgreSQL:** We will choose one of these relational databases based on our deployment environment and team preference.
- **Spring Data JPA:** To simplify CRUD operations and abstract database interactions.

### 3.4 Middleware and Deployment

- **Podman:** For containerizing both the application and the database, ensuring consistent deployment.
- **Dockerfiles:** To automate container creation and manage application images.
- **Spring Config Externalization:** To manage environment-specific configuration variables and ensure smooth deployment across different environments.

### 3.5 API and Web Services

- **RestController:** For exposing RESTful APIs to handle application logic and data operations.
- **Swagger:** For comprehensive API documentation and facilitating testing.
- **Spectral CLI:** To enforce API governance and adhere to our Open API Specification standards.
- **Open API Specification:** To guide our API-first design approach and ensure clear, consistent API contracts.

---

## 4. Functional Requirements

### 4.1 Authentication and Authorization

- **Secure Login:** Separate authentication for Admin and Employee roles.
- **Role-Based Access:** Ensure restricted access to features based on user role.

### 4.2 Customer Management

- **CRUD Operations:** Create, read, update, and delete customer profiles.
- **Data Management:** Handle detailed information including insurance data, past medical history, and contact details.
- **Validation:** Implement server-side data validation and error handling.

### 4.3 Task Management

- **Task Assignment:** Allow admins to assign tasks to employees.
- **Progress Tracking:** Monitor task statuses and allow employees to update progress.
- **Completion:** Mark tasks as complete and optionally notify relevant users.

### 4.4 Reports Dashboard

- **Reporting:** Enable admins to generate reports on:
  - Customer records and activity.
  - Employee performance and task completion.
- **Visualization:** Provide charts or tabulated data for enhanced decision-making.

### 4.5 Deployment and Testing

- **Containerization:** Deploy application and database in separate Docker/Podman containers.
- **Testing:** Unit tests, integration tests, and API testing using tools like Postman.
- **Documentation:** Maintain comprehensive user and technical documentation.

---

## 5. Learning Objectives

1. **J2EE & Spring Framework:** Understand J2EE web development principles using Spring Boot, MVC, and Data JPA.
2. **Security:** Implement role-based authentication and authorization using Spring Security and JWT.
3. **UI Development:** Develop dynamic web interfaces using Thymeleaf, HTML5, CSS3, and Bootstrap.
4. **Database Management:** Learn ORM techniques and manage database interactions using Spring Data JPA.
5. **Containerization:** Gain experience with containerization tools (Docker/Podman) for consistent deployment.
6. **API Development:** Create and document RESTful APIs using Swagger.
7. **Agile Project Management:** Plan, execute, and deliver a project within a tight one-month timeline.

---

## 6. Team Building

### 6.1 Team Composition

Each team must consist of 4 members:

1. **Team Lead/Project Manager**
2. **Frontend Developer**
3. **Backend Developer**
4. **Tester/QA Engineer**

### 6.2 Responsibilities

- **Team Lead:** Oversee project planning, manage timelines, and coordinate team efforts.
- **Frontend Developer:** Design and implement user interfaces; integrate Thymeleaf templates and Bootstrap for responsive design.
- **Backend Developer:** Develop core functionalities using Spring Boot, design database schema, and implement RESTful APIs.
- **Tester:** Create and execute test cases; perform unit, integration, and API testing; ensure overall system quality.

---

## 7. Deliverables

### Phase I

- **Documentation:** Business Case Document, Requirement Analysis, and Initial UML Diagrams (Class & Sequence).
- **Repository:** Set up initial GitHub repository.
- **Planning:** Detailed project plan and timeline.

### Phase II

- **MVP Development:**
  - Authentication and Role-Based Access.
  - Customer Management (CRUD operations).
  - Task Management Module.
  - Initial Reports Dashboard.
- **Testing:** Unit and integration tests, along with initial API documentation using Swagger.

### Phase III

- **Finalization:**
  - Complete integration and performance testing.
  - Containerized deployment using Docker/Podman.
  - Final documentation and project report.
- **Presentation:** Preparation for final demo and presentation.

---

## 8. Evaluation Criteria

| **Category**                              | **Weight (%)** |
| ----------------------------------------- | -------------- |
| Planning & Documentation                  | 20%            |
| MVP Development                           | 25%            |
| Deployment & Testing                      | 20%            |
| Core Functionality (CRM, Reporting, etc.) | 20%            |
| Presentation & Demo                       | 15%            |

---

## 9. Presentation and System Demo

- **Presentation Content:**
  - Problem Statement & Business Case.
  - System Architecture and Technology Stack.
  - Detailed walkthrough of key features (Authentication, Customer & Task Management, Reports Dashboard).
  - Challenges encountered and solutions implemented.
- **Demo Requirements:**
  - Showcase secure login for both Admin and Employee.
  - Demonstrate CRUD operations on customer profiles.
  - Display task assignment and progress tracking functionality.
  - Present the reporting dashboard with sample generated reports.
  - Overview of the deployment process and containerized environment.

---
